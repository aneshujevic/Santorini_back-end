{"version":3,"sources":["components/square.js","components/board.js","components/game.js","index.js"],"names":["Square","props","glowing","className","onClick","src","alt","width","height","axios","defaults","xsrfCookieName","xsrfHeaderName","Board","state","cells","Array","fill","firstHE","secondHE","firstJU","secondJU","availableMovesOrBuilds","humanNext","humanPlayer","human","chooseMove","moving","building","buildersSetUp","lastClickedId","upperBoundCellValue","lowerBoundCellValue","sources","this","map","square","getImageSourceCell","renderSquare","source","idOfCell","find","x","clickHandle","i","setUpBuilders","setUpAIBuilders","setState","setupAvailableMoves","moveFigure","buildBlock","doMoveAI","URL","depth","getAIMoveFromServer","then","resp","coordinatesMoveFrom","buildersID","data","id","move","build","console","log","url","slice","startPosition","post","catch","err","response","firstJULocal","secondJULocal","availableCells","undefined","_","length","splice","positions","Math","random","firstHEPositions","includes","secondHEPositions","selectedCoordinate","getMovesFromServer","arrayOfMoves","floor","moves","onCell","fromCell","toCell","callBackFunction","multiplier","oldValueOfCell","React","Component","Game","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bbe21c52.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Square(props) {\r\n    return props.glowing === true ?\r\n        (\r\n            <button className=\"square glowing\" onClick={props.onClick}>\r\n                <img src={props.src} alt=\"Polje\" width=\"100%\" height=\"100%\"></img>\r\n            </button>\r\n        ):\r\n        (\r\n            <button className=\"square\" onClick={props.onClick}>\r\n                <img src={props.src} alt=\"Polje\" width=\"100%\" height=\"100%\"></img>\r\n            </button>\r\n        )\r\n}\r\n\r\nexport default Square;\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport Square from './square';\r\naxios.defaults.xsrfCookieName = 'csrftoken';\r\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\r\n\r\nconst getAvailableMovesURL = \"http://127.0.0.1:8000/getAvailableMoves/\";\r\nconst getAvailableBuildsURL = \"http://127.0.0.1:8000/getAvailableBuilds/\";\r\nconst getMoveMinmaxAIURL = \"http://127.0.0.1:8000/minmax/\";\r\nconst getMoveAlphaBetaAIURL = \"http://127.0.0.1:8000/alphaBeta/\";\r\nconst getMoveAlphaBetaCustomAIURL = \"http://127.0.0.1:8000/alphaBetaCustom/\";\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            cells: Array(25).fill(0),\r\n            firstHE: -1,\r\n            secondHE: -1,\r\n            firstJU: -1,\r\n            secondJU: -1,\r\n            availableMovesOrBuilds: [],\r\n            humanNext: true,\r\n        };\r\n        // arguable vvvvvvvvvvvvvvvvvv\r\n        this.humanPlayer = props.human;\r\n        this.chooseMove = false;\r\n        this.moving = false;\r\n        this.building = false;\r\n        this.buildersSetUp = 0;\r\n        this.lastClickedId = -1;\r\n        // values from 9 to 12 belong to Jupiter \r\n        this.upperBoundCellValue = 12;\r\n        this.lowerBoundCellValue = 9;\r\n\r\n        // test\r\n        //this.state.cells[0] = 11;\r\n        //this.state.firstHE = 0;\r\n        //this.state.availableMovesOrBuilds = [[0, 1], [0, 2], [0, 3]];\r\n    }\r\n\r\n    render() {\r\n        const sources = this.state.cells.map((square) => this.getImageSourceCell(square));\r\n        return (\r\n            <div className=\"board\">\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(sources[0], 0)}\r\n                    {this.renderSquare(sources[1], 1)}\r\n                    {this.renderSquare(sources[2], 2)}\r\n                    {this.renderSquare(sources[3], 3)}\r\n                    {this.renderSquare(sources[4], 4)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(sources[5], 5)}\r\n                    {this.renderSquare(sources[6], 6)}\r\n                    {this.renderSquare(sources[7], 7)}\r\n                    {this.renderSquare(sources[8], 8)}\r\n                    {this.renderSquare(sources[9], 9)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(sources[10], 10)}\r\n                    {this.renderSquare(sources[11], 11)}\r\n                    {this.renderSquare(sources[12], 12)}\r\n                    {this.renderSquare(sources[13], 13)}\r\n                    {this.renderSquare(sources[14], 14)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(sources[15], 15)}\r\n                    {this.renderSquare(sources[16], 16)}\r\n                    {this.renderSquare(sources[17], 17)}\r\n                    {this.renderSquare(sources[18], 18)}\r\n                    {this.renderSquare(sources[19], 19)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(sources[20], 20)}\r\n                    {this.renderSquare(sources[21], 21)}\r\n                    {this.renderSquare(sources[22], 22)}\r\n                    {this.renderSquare(sources[23], 23)}\r\n                    {this.renderSquare(sources[24], 24)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderSquare(source, idOfCell) {\r\n        const glowing = this.state.availableMovesOrBuilds?.find(x => x === idOfCell) != null ? true : false;\r\n        return (\r\n            <Square\r\n                src={`/static/images/${source}`}\r\n                onClick={() => this.clickHandle(idOfCell)}\r\n                glowing={glowing}\r\n            />\r\n        );\r\n    }\r\n\r\n    // Choosing a path for the image source for the appropriate value\r\n    getImageSourceCell(i) {\r\n        switch (i) {\r\n            case 0:\r\n                return \"lvl_0.jpg\";\r\n            case 1:\r\n                return \"lvl_1.png\";\r\n            case 2:\r\n                return \"lvl_2.png\";\r\n            case 3:\r\n                return \"lvl_3.png\";\r\n            case 4:\r\n                return \"lvl_4.png\";\r\n            case 5:\r\n                return \"hercules.png\";\r\n            case 6:\r\n                return \"lvl_1_HE.png\";\r\n            case 7:\r\n                return \"lvl_2_HE.png\";\r\n            case 8:\r\n                return \"lvl_3_HE.png\";\r\n            case 9:\r\n                return \"jupiter.png\";\r\n            case 10:\r\n                return \"lvl_1_JU.png\";\r\n            case 11:\r\n                return \"lvl_2_JU.png\";\r\n            case 12:\r\n                return \"lvl_3_JU.png\";\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n\r\n    clickHandle(idOfCell) {\r\n        if (this.state.humanNext !== true)\r\n            return;\r\n        // if the board is empty, nothing on it yet\r\n        if (this.buildersSetUp < 2) {\r\n            this.setUpBuilders(idOfCell);\r\n\r\n            if (this.buildersSetUp === 2)\r\n                this.setUpAIBuilders();\r\n            return;\r\n        }\r\n\r\n        // If we clicked on our builder\r\n        if (this.lowerBoundCellValue <= this.state.cells[idOfCell] && this.state.cells[idOfCell] <= this.upperBoundCellValue) {\r\n            // If we weren't moving, that is a builder is being selected\r\n            if (this.moving === false && this.building === false && idOfCell !== this.lastClickedId && this.lastClickedId === -1) {\r\n                this.lastClickedId = idOfCell;\r\n                this.chooseMove = true;\r\n            }\r\n            // If we're undo-ing the selection of builder\r\n            else if (idOfCell === this.lastClickedId && this.building === false) {\r\n                this.chooseMove = false;\r\n                this.moving = false;\r\n                this.lastClickedId = -1;\r\n                this.setState({ availableMovesOrBuilds: null });\r\n            }\r\n        }\r\n\r\n        // If we selected a builder then we're in a phase of choosing where to move, builder can still be de-selected\r\n        if (this.chooseMove === true) {\r\n            if (this.lastClickedId === idOfCell)\r\n                this.setupAvailableMoves(idOfCell, getAvailableMovesURL);\r\n            else {\r\n                this.chooseMove = false;\r\n                this.moving = true;\r\n            }\r\n            // make a request for available moves \r\n            // make a converter to python - implemented game\r\n        }\r\n\r\n        // If we decided to move to a certain field and that field is in the list of allowed moves\r\n        if (this.moving === true && this.state.availableMovesOrBuilds.find(x => x === idOfCell) != null) {\r\n            this.moveFigure(this.lastClickedId, idOfCell, () => this.setupAvailableMoves(idOfCell, getAvailableBuildsURL));\r\n            this.lastClickedId = -1;\r\n            this.moving = false;\r\n            this.building = true;\r\n            return;\r\n            //this.setupAvailableMoves(idOfCell, getAvailableBuildsURL);\r\n            // make a request for available builds\r\n        }\r\n\r\n        // If we decided to move to a certain field and that field is in the list of allowed moves\r\n        if (this.building === true && this.state.availableMovesOrBuilds.find(x => x === idOfCell) != null) {\r\n            this.buildBlock(idOfCell);\r\n            this.building = false;\r\n            this.setState({ availableMovesOrBuilds: null, humanNext: false }, () => this.doMoveAI(getMoveAlphaBetaCustomAIURL, 4));\r\n        }\r\n    }\r\n\r\n    doMoveAI(URL, depth) {\r\n        // Hardcoded - to be deleted\r\n        this.getAIMoveFromServer(URL, depth)\r\n            .then((resp) => {\r\n                const buildersID = resp.data.id;\r\n                const move = resp.data.move[0] * 5 + resp.data.move[1];\r\n                const build = resp.data.build[0] * 5 + resp.data.build[1];\r\n\r\n                let coordinatesMoveFrom;\r\n                switch (buildersID) {\r\n                    case 1:\r\n                        coordinatesMoveFrom = this.state.firstHE;\r\n                        break;\r\n                    case 2:\r\n                        coordinatesMoveFrom = this.state.secondHE;\r\n                        break;\r\n                    default:\r\n                        coordinatesMoveFrom = null;\r\n                }\r\n\r\n                this.moveFigure(coordinatesMoveFrom, move, () => console.log(\"did my work\"));\r\n                this.buildBlock(build);\r\n            });\r\n\r\n    };\r\n\r\n    async getAIMoveFromServer(url, depth) {\r\n        const cells = this.state.cells.slice().map((x) => {\r\n            if (x >= 9)\r\n                return (x + 1) % 5;\r\n            else if (x >= 5)\r\n                return x % 5;\r\n            else\r\n                return x;\r\n        });\r\n        const data = [{\r\n            cells: cells,\r\n            firstHE: this.state.firstHE,\r\n            secondHE: this.state.secondHE,\r\n            firstJU: this.state.firstJU,\r\n            secondJU: this.state.secondJU,\r\n            startPosition: null,\r\n            depth: depth\r\n        }];\r\n        const response = await axios\r\n            .post(url, data)\r\n            .catch((err) => { console.log(err) });\r\n\r\n        return response;\r\n    }\r\n\r\n    setUpBuilders(idOfCell) {\r\n        const cells = this.state.cells;\r\n        cells[idOfCell] = 9;\r\n        this.setState({\r\n            cells: cells,\r\n            firstJU: this.buildersSetUp === 0 ? idOfCell : this.state.firstJU,\r\n            secondJU: this.buildersSetUp === 1 ? idOfCell : this.state.secondJU\r\n        }, () => ++this.buildersSetUp === 2 ? this.setUpAIBuilders() : null);\r\n    }\r\n\r\n    setUpAIBuilders() {\r\n        const firstJULocal = this.state.firstJU;\r\n        const secondJULocal = this.state.secondJU;\r\n        let availableCells = Array(25).fill(undefined).map((_, i) => i);\r\n\r\n        for (var i = availableCells.length - 1; i >= 0; i--) {\r\n            if (availableCells[i] === firstJULocal || availableCells[i] === secondJULocal) {\r\n                availableCells.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        let positions = [6, -6, 5, -5, 1, -1];\r\n\r\n        if (firstJULocal > 12)\r\n            positions = positions.map(x => -x);\r\n\r\n        let firstHE = availableCells[Math.random(25)]\r\n        let secondHE = availableCells[Math.random(25)]\r\n\r\n        const firstHEPositions = positions.map(x => firstJULocal + x);\r\n        for (let i = 0; i < firstHEPositions.length; i++) {\r\n            if (availableCells.includes(firstHEPositions[i])) {\r\n                firstHE = firstHEPositions[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        positions = positions.map(x => -x);\r\n        const secondHEPositions = positions.map(x => firstHE + x);\r\n        for (let i = 0; i < secondHEPositions.length; i++) {\r\n            if (availableCells.includes(secondHEPositions[i])) {\r\n                secondHE = secondHEPositions[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        const cells = this.state.cells.slice();\r\n        cells[firstHE] = 5;\r\n        cells[secondHE] = 5;\r\n        this.setState({\r\n            firstHE: firstHE,\r\n            secondHE: secondHE,\r\n            cells: cells\r\n        });\r\n    }\r\n\r\n    setupAvailableMoves(selectedCoordinate, url) {\r\n        this.getMovesFromServer(selectedCoordinate, url)\r\n            .then((arrayOfMoves) => this.setState({ availableMovesOrBuilds: arrayOfMoves }));\r\n    }\r\n\r\n    async getMovesFromServer(selectedCoordinate, url) {\r\n        const cells = this.state.cells.slice().map((x) => {\r\n            if (x >= 9)\r\n                return (x + 1) % 5;\r\n            else if (x >= 5)\r\n                return x % 5;\r\n            else\r\n                return x;\r\n        });\r\n        const data = [{\r\n            cells: cells,\r\n            firstHE: this.state.firstHE,\r\n            secondHE: this.state.secondHE,\r\n            firstJU: this.state.firstJU,\r\n            secondJU: this.state.secondJU,\r\n            startPosition: [Math.floor(selectedCoordinate / 5), selectedCoordinate % 5],\r\n            depth: null\r\n        }];\r\n        const response = await axios\r\n            .post(url, data)\r\n            .catch((err) => { console.log(err) });\r\n        return response.data.moves.map(x => x[0] * 5 + x[1]);\r\n    }\r\n\r\n    // Pravimo blok\r\n    buildBlock(onCell) {\r\n        const cells = this.state.cells.slice();\r\n        cells[onCell] += 1;\r\n        this.setState({\r\n            cells: cells,\r\n            humanNext: !this.state.humanNext\r\n        });\r\n    }\r\n\r\n    // Moving a figure\r\n    // TODO: note the changes of figure in state, maybe when setting up things then doing the changes here too?\r\n    moveFigure(fromCell, toCell, callBackFunction) {\r\n        const multiplier = Math.floor((this.state.cells[fromCell] + 1) / 5);\r\n        const cells = this.state.cells.slice();\r\n        const oldValueOfCell = cells[fromCell];\r\n        cells[fromCell] = oldValueOfCell >= 9 ? (cells[fromCell] + 1) % 5 : cells[fromCell] % 5;\r\n        cells[toCell] = oldValueOfCell >= 9 ? 5 * multiplier + cells[toCell] - 1 : 5 * multiplier + cells[toCell];\r\n        this.setState({\r\n            firstHE: this.state.firstHE === fromCell ? toCell : this.state.firstHE,\r\n            secondHE: this.state.secondHE === fromCell ? toCell : this.state.secondHE,\r\n            firstJU: this.state.firstJU === fromCell ? toCell : this.state.firstJU,\r\n            secondJU: this.state.secondJU === fromCell ? toCell : this.state.secondJU,\r\n            cells: cells,\r\n        }, callBackFunction);\r\n    }\r\n\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport Board from './board';\r\n\r\nclass Game extends React.Component {\r\n    render() {\r\n        return (\r\n            <Board human=\"JU\"/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;","import Game from './components/game';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './game.css';\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}